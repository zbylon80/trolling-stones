---
import AdminLayout from "@components/AdminLayout.astro";
import { adminCookieName, isSessionValid } from "../../utils/auth";
import { readGigs } from "../../utils/gigs";

export const prerender = false;

const token = Astro.cookies.get(adminCookieName)?.value;
const isAuthenticated = isSessionValid(token);
const gigs = isAuthenticated ? await readGigs() : [];

const sections = [
  { id: "gigs", label: "Koncerty", enabled: true, note: "Zarzadzaj lista wystepow i sprzedaza biletow." },
  { id: "gallery", label: "Galeria", enabled: false },
  { id: "news", label: "Aktualnosci", enabled: false },
  { id: "bio", label: "Bio", enabled: false },
  { id: "lineup", label: "Sklad", enabled: false },
  { id: "contact", label: "Kontakt", enabled: false },
];

const activeSection = "gigs";
const pageTitle = isAuthenticated ? "Panel treÅ›ci" : "Logowanie do panelu";
---
<AdminLayout title={`Panel administracyjny - ${pageTitle}`}>
  {isAuthenticated ? (
    <section class="space-y-8">
      <header class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div class="flex flex-col gap-2">
          <a
            href="/"
            class="inline-flex w-fit items-center rounded border border-neutral-700 px-3 py-1 text-sm font-semibold uppercase tracking-wide hover:bg-neutral-900 mb-2"
          >
            TRolling Stones
          </a>
          <h1 class="text-3xl font-semibold">Panel tresci</h1>
          <p class="text-neutral-400">Wybierz zakladke do edycji. Aktualnie dostepna jest sekcja koncertowa.</p>
        </div>
        <button
          id="logout-button"
          class="self-start rounded border border-neutral-700 px-3 py-1 text-sm hover:bg-neutral-900"
          type="button"
        >
          Wyloguj
        </button>
      </header>

      <nav class="flex flex-wrap items-center gap-2 text-sm" aria-label="Sekcje panelu">
        {sections.map((section) =>
          section.enabled ? (
            <button
              type="button"
              data-section={section.id}
              class={`rounded px-3 py-1 font-medium ${section.id === activeSection ? "bg-brand-600 text-white" : "border border-neutral-700 bg-neutral-950 text-neutral-200 hover:border-brand-500 hover:text-white"}`}
              aria-current={section.id === activeSection ? "page" : undefined}
            >
              {section.label}
            </button>
          ) : (
            <span
              class="cursor-not-allowed rounded border border-dashed border-neutral-700 px-3 py-1 text-neutral-500"
              aria-disabled="true"
              title="Sekcja w przygotowaniu"
            >
              {section.label}
              <span class="ml-1 text-xs uppercase tracking-wide text-neutral-600">wkrotce</span>
            </span>
          )
        )}
      </nav>

      <p class="text-sm text-neutral-400">
        {sections.find((section) => section.id === activeSection)?.note ?? "Funkcje dla tej sekcji pojawiÄ… siÄ™ wkrÃ³tce."}
      </p>

      <div id="status" class="hidden rounded border border-neutral-700 bg-neutral-900 px-4 py-3 text-sm"></div>

      <div class="space-y-6" data-role="gigs-list">
        {gigs.length === 0 ? (
          <div class="rounded border border-dashed border-neutral-700 px-6 py-10 text-center text-neutral-400">
            Brak koncertow. Dodaj pierwszy wpis ponizej.
          </div>
        ) : (
          gigs.map((gig) => (
            <form
              class="gig-form rounded border border-neutral-800 bg-neutral-950 p-6 shadow-sm"
              data-id={gig.id}
            >
              <div class="flex flex-col gap-4 md:flex-row md:items-start md:justify-between">
                <div class="flex-1 space-y-4">
                  <div class="grid gap-4 sm:grid-cols-3">
                    <label class="flex flex-col gap-1 text-sm">
                      <span class="text-neutral-400">Data</span>
                      <input
                        class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                        type="date"
                        name="date"
                        value={gig.date}
                        required
                      />
                    </label>
                    <label class="flex flex-col gap-1 text-sm">
                      <span class="text-neutral-400">Miasto</span>
                      <input
                        class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                        type="text"
                        name="city"
                        value={gig.city}
                        required
                      />
                    </label>
                    <label class="flex flex-col gap-1 text-sm">
                      <span class="text-neutral-400">Miejsce</span>
                      <input
                        class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                        type="text"
                        name="venue"
                        value={gig.venue}
                        required
                      />
                    </label>
                  </div>

                  <label class="flex flex-col gap-1 text-sm">
                    <span class="text-neutral-400">Opis (opcjonalnie)</span>
                    <textarea
                      class="min-h-[96px] rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                      name="description"
                    >{gig.description ?? ""}</textarea>
                  </label>

                  <div class="grid gap-4 md:grid-cols-2">
                    <label class="flex flex-col gap-1 text-sm">
                      <span class="text-neutral-400">Adres ikony (opcjonalnie)</span>
                      <input
                        class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                        type="text"
                        name="logo"
                        value={gig.logo ?? ""}
                        placeholder="/images/logo.png"
                      />
                    </label>
                    <label class="flex flex-col gap-1 text-sm">
                      <span class="text-neutral-400">Link do biletow</span>
                      <input
                        class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
                        type="url"
                        name="ticketsUrl"
                        value={gig.ticketsUrl ?? ""}
                        placeholder="https://"
                      />
                    </label>
                  </div>

                  <label class="flex items-center gap-2 text-sm text-neutral-300">
                    <input
                      class="h-4 w-4 rounded border-neutral-700 bg-neutral-900"
                      type="checkbox"
                      name="ticketsEnabled"
                      checked={gig.ticketsEnabled}
                    />
                    Pokazuj przycisk "Kup bilety"
                  </label>
                  <label class="flex items-center gap-2 text-sm text-neutral-300">
                    <input
                      class="h-4 w-4 rounded border-neutral-700 bg-neutral-900"
                      type="checkbox"
                      name="ticketsSoldOut"
                      checked={gig.ticketsSoldOut}
                    />
                    Oznacz jako "SOLD OUT"
                  </label>
                </div>

                <div class="w-full max-w-[160px] space-y-2">
                  <button
                    type="submit"
                    class="w-full rounded bg-brand-600 px-3 py-2 text-sm font-semibold text-white hover:bg-brand-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled
                  >
                    Zapisz zmiany
                  </button>
                  <button
                    type="button"
                    data-action="delete"
                    class="w-full rounded border border-red-700 px-3 py-2 text-sm text-red-300 hover:bg-red-900/30"
                  >
                    Usun wpis
                  </button>
                  <div class="text-xs text-neutral-500 break-all">ID: {gig.id}</div>
                </div>
              </div>
            </form>
          ))
        )}
      </div>

      <section class="rounded border border-neutral-800 bg-neutral-950 p-6 shadow-sm">
        <h2 class="text-xl font-semibold">Dodaj nowy koncert</h2>
        <form id="new-gig-form" class="mt-4 space-y-4">
          <div class="grid gap-4 sm:grid-cols-3">
            <label class="flex flex-col gap-1 text-sm">
              <span class="text-neutral-400">Data</span>
              <input class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2" type="date" name="date" required />
            </label>
            <label class="flex flex-col gap-1 text-sm">
              <span class="text-neutral-400">Miasto</span>
              <input class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2" type="text" name="city" required />
            </label>
            <label class="flex flex-col gap-1 text-sm">
              <span class="text-neutral-400">Miejsce</span>
              <input class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2" type="text" name="venue" required />
            </label>
          </div>

          <label class="flex flex-col gap-1 text-sm">
            <span class="text-neutral-400">Opis (opcjonalnie)</span>
            <textarea class="min-h-[96px] rounded border border-neutral-700 bg-neutral-900 px-3 py-2" name="description"></textarea>
          </label>

          <div class="grid gap-4 md:grid-cols-2">
            <label class="flex flex-col gap-1 text-sm">
              <span class="text-neutral-400">Adres ikony (opcjonalnie)</span>
              <input class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2" type="text" name="logo" placeholder="/images/logo.png" />
            </label>
            <label class="flex flex-col gap-1 text-sm">
              <span class="text-neutral-400">Link do biletow</span>
              <input class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2" type="url" name="ticketsUrl" placeholder="https://" />
            </label>
          </div>

          <label class="flex items-center gap-2 text-sm text-neutral-300">
            <input class="h-4 w-4 rounded border-neutral-700 bg-neutral-900" type="checkbox" name="ticketsEnabled" />
            Od razu pokazuj przycisk "Kup bilety"
          </label>
          <label class="flex items-center gap-2 text-sm text-neutral-300">
            <input class="h-4 w-4 rounded border-neutral-700 bg-neutral-900" type="checkbox" name="ticketsSoldOut" />
            Oznacz jako "SOLD OUT"
          </label>

          <button
            type="submit"
            class="rounded bg-brand-600 px-4 py-2 text-sm font-semibold text-white hover:bg-brand-500"
          >
            Dodaj koncert
          </button>
        </form>
      </section>
    </section>
  ) : (
    <section class="mx-auto max-w-md rounded border border-neutral-800 bg-neutral-950 p-8 shadow-sm">
      <a
        href="/"
        class="inline-flex w-fit items-center rounded border border-neutral-700 px-3 py-1 text-sm font-semibold uppercase tracking-wide hover:bg-neutral-900 mb-4"
      >
        TRolling Stones
      </a>
      <h1 class="text-2xl font-semibold">Panel tresci</h1>
      <p class="mt-2 text-sm text-neutral-400">Podaj haslo, aby uzyskac dostep.</p>
      <form id="login-form" class="mt-6 space-y-4">
        <label class="flex flex-col gap-1 text-sm">
          <span class="text-neutral-400">Haslo</span>
          <input
            class="rounded border border-neutral-700 bg-neutral-900 px-3 py-2"
            type="password"
            name="password"
            autocomplete="current-password"
            required
          />
        </label>
        <button
          type="submit"
          class="w-full rounded bg-brand-600 px-3 py-2 text-sm font-semibold text-white hover:bg-brand-500"
        >
          Zaloguj
        </button>
      </form>
      <p id="login-error" class="mt-4 hidden text-sm text-red-400"></p>
    </section>
  )}

  <script type="module">
    const statusBox = document.getElementById('status');

    function showStatus(message, kind = 'info') {
      if (!statusBox) return;
      statusBox.textContent = message;
      statusBox.classList.remove('hidden');
      statusBox.classList.toggle('text-green-300', kind === 'success');
      statusBox.classList.toggle('text-red-300', kind === 'error');
      statusBox.classList.toggle('text-neutral-200', kind === 'info');
      window.clearTimeout(statusBox.dataset.timerId ? Number(statusBox.dataset.timerId) : undefined);
      const timerId = window.setTimeout(() => {
        statusBox?.classList.add('hidden');
      }, 3000);
      statusBox.dataset.timerId = String(timerId);
    }

    async function callApi(path, options) {
      const response = await fetch(path, {
        headers: { 'content-type': 'application/json' },
        credentials: 'same-origin',
        ...options,
      });
      const data = await response.json().catch(() => ({}));
      if (!response.ok) {
        throw new Error(data.error || 'Wystapil blad.');
      }
      return data;
    }

    const loginForm = document.getElementById('login-form');
    if (loginForm) {
      const errorBox = document.getElementById('login-error');
      loginForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(loginForm);
        const password = formData.get('password');
        try {
          await callApi('/api/login', {
            method: 'POST',
            body: JSON.stringify({ password }),
          });
          window.location.reload();
        } catch (error) {
          if (errorBox) {
            errorBox.textContent = error instanceof Error ? error.message : 'Blad logowania.';
            errorBox.classList.remove('hidden');
          }
        }
      });
    }

    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
      logoutButton.addEventListener('click', async () => {
        try {
          await callApi('/api/logout', { method: 'POST', body: '{}' });
          window.location.reload();
        } catch (error) {
          const message = error instanceof Error ? error.message : 'Nie udalo sie wylogowac.';
          showStatus(message, 'error');
        }
      });
    }

    function collectFormPayload(form) {
      const formData = new FormData(form);
      const getString = (key) => {
        const value = formData.get(key);
        return typeof value === 'string' ? value.trim() : '';
      };
      const optional = (value) => (value === '' ? undefined : value);
      const getCheckbox = (name) => {
        const input = form.querySelector(`input[name="${name}"]`);
        if (input instanceof HTMLInputElement) {
          return input.checked;
        }
        return formData.get(name) === 'on';
      };
      const ticketsSoldOut = getCheckbox('ticketsSoldOut');
      const ticketsEnabled = ticketsSoldOut ? false : getCheckbox('ticketsEnabled');
      return {
        id: form.dataset.id,
        date: getString('date'),
        city: getString('city'),
        venue: getString('venue'),
        description: optional(getString('description')),
        logo: optional(getString('logo')),
        ticketsUrl: optional(getString('ticketsUrl')),
        ticketsEnabled,
        ticketsSoldOut,
      };
    }

    document.querySelectorAll('.gig-form').forEach((form) => {
      const submitBtn = form.querySelector('button[type="submit"]');
      const ticketsEnabledInput = form.querySelector('input[name="ticketsEnabled"]');
      const ticketsSoldOutInput = form.querySelector('input[name="ticketsSoldOut"]');

      const storeInitialSnapshot = () => {
        const snapshot = collectFormPayload(form);
        form.dataset.initial = JSON.stringify(snapshot);
      };

      const updateDirtyState = () => {
        if (!submitBtn) {
          return;
        }
        const currentSnapshot = JSON.stringify(collectFormPayload(form));
        const initialSnapshot = form.dataset.initial ?? '';
        submitBtn.disabled = currentSnapshot === initialSnapshot;
      };

      const syncTicketControls = () => {
        if (ticketsEnabledInput instanceof HTMLInputElement && ticketsSoldOutInput instanceof HTMLInputElement) {
          if (ticketsSoldOutInput.checked) {
            ticketsEnabledInput.checked = false;
            ticketsEnabledInput.disabled = true;
          } else {
            ticketsEnabledInput.disabled = false;
          }
        }
      };

      storeInitialSnapshot();
      syncTicketControls();
      updateDirtyState();

      if (ticketsSoldOutInput instanceof HTMLInputElement) {
        ticketsSoldOutInput.addEventListener('change', () => {
          syncTicketControls();
          updateDirtyState();
        });
      }

      if (ticketsEnabledInput instanceof HTMLInputElement) {
        ticketsEnabledInput.addEventListener('change', () => {
          if (ticketsEnabledInput.checked && ticketsSoldOutInput instanceof HTMLInputElement) {
            ticketsSoldOutInput.checked = false;
          }
          syncTicketControls();
          updateDirtyState();
        });
      }

      form.addEventListener('input', updateDirtyState);
      form.addEventListener('change', updateDirtyState);

      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const payload = collectFormPayload(form);
        if (submitBtn) {
          submitBtn.disabled = true;
        }
        try {
          await callApi('/api/gigs', {
            method: 'PUT',
            body: JSON.stringify(payload),
          });
          form.dataset.initial = JSON.stringify(payload);
          updateDirtyState();
          showStatus('Zapisano zmiany.', 'success');
        } catch (error) {
          const message = error instanceof Error ? error.message : 'Nie udalo sie zapisac zmian.';
          showStatus(message, 'error');
          updateDirtyState();
        }
      });

      const deleteBtn = form.querySelector('[data-action="delete"]');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async () => {
          if (!window.confirm('Usunac ten koncert?')) {
            return;
          }
          try {
            const id = form.dataset.id;
            await callApi(`/api/gigs?id=${encodeURIComponent(id ?? '')}`, { method: 'DELETE' });
            form.remove();
            showStatus('Wpis usuniety.', 'success');
          } catch (error) {
            const message = error instanceof Error ? error.message : 'Nie udalo sie usunac wpisu.';
            showStatus(message, 'error');
          }
        });
      }
    });

    const addForm = document.getElementById('new-gig-form');
    if (addForm) {
      const newTicketsEnabledInput = addForm.querySelector('input[name="ticketsEnabled"]');
      const newTicketsSoldOutInput = addForm.querySelector('input[name="ticketsSoldOut"]');

      const syncNewTicketControls = () => {
        if (newTicketsEnabledInput instanceof HTMLInputElement && newTicketsSoldOutInput instanceof HTMLInputElement) {
          if (newTicketsSoldOutInput.checked) {
            newTicketsEnabledInput.checked = false;
            newTicketsEnabledInput.disabled = true;
          } else {
            newTicketsEnabledInput.disabled = false;
          }
        }
      };

      if (newTicketsSoldOutInput instanceof HTMLInputElement) {
        newTicketsSoldOutInput.addEventListener('change', () => {
          syncNewTicketControls();
        });
      }

      if (newTicketsEnabledInput instanceof HTMLInputElement) {
        newTicketsEnabledInput.addEventListener('change', () => {
          if (newTicketsEnabledInput.checked && newTicketsSoldOutInput instanceof HTMLInputElement) {
            newTicketsSoldOutInput.checked = false;
          }
          syncNewTicketControls();
        });
      }

      syncNewTicketControls();

      addForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const payload = collectFormPayload(addForm);
        delete payload.id;
        try {
          await callApi('/api/gigs', {
            method: 'POST',
            body: JSON.stringify(payload),
          });
          window.location.reload();
        } catch (error) {
          const message = error instanceof Error ? error.message : 'Nie udalo sie dodac koncertu.';
          showStatus(message, 'error');
        }
      });
    }
  </script>
</AdminLayout>
