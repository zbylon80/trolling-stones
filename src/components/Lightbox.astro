---
---
<div id="lightbox-overlay" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/90 p-4" role="dialog" aria-modal="true" aria-label="Podglad zdjecia">
  <button id="lightbox-close" class="absolute right-4 top-4 inline-flex items-center justify-center rounded-md bg-white/10 p-2 text-white hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white" aria-label="Zamknij podglad">
    &times;
  </button>
  <img id="lightbox-image" alt="Podglad" class="max-h-[90vh] max-w-[90vw] object-contain rounded" />
  <div id="lightbox-caption" class="absolute bottom-4 left-1/2 -translate-x-1/2 text-center text-neutral-300 text-sm px-3"></div>
  <!-- Klikniecie tla zamyka -->
  <button id="lightbox-backdrop" class="absolute inset-0 -z-10" aria-hidden="true"></button>
  <style is:inline>
    /* Tailwind classes handle styling */
  </style>
  <script>
    const overlay = document.getElementById('lightbox-overlay');
    const imgEl = document.getElementById('lightbox-image');
    const captionEl = document.getElementById('lightbox-caption');
    const closeBtn = document.getElementById('lightbox-close');
    const backdropBtn = document.getElementById('lightbox-backdrop');

    if (!(overlay instanceof HTMLElement) || !(imgEl instanceof HTMLImageElement) || !(captionEl instanceof HTMLElement)) {
      console.warn('Lightbox: missing required DOM nodes');
    } else {
      const openLightbox = (src: string, altText = '') => {
        const caption = altText.trim();
        imgEl.src = src;
        imgEl.alt = caption || 'Podglad';
        captionEl.textContent = caption;
        overlay.classList.remove('hidden');
        overlay.classList.add('flex');
        document.body.style.overflow = 'hidden';
      };

      const closeLightbox = () => {
        overlay.classList.add('hidden');
        overlay.classList.remove('flex');
        imgEl.src = '';
        captionEl.textContent = '';
        document.body.style.overflow = '';
      };

      // Delegation: elements with data-lightbox
      document.addEventListener('click', (event) => {
        const target = event.target;
        if (!(target instanceof Element)) {
          return;
        }

        const trigger = target.closest('[data-lightbox]');
        if (!trigger) {
          return;
        }

        event.preventDefault();
        const full =
          trigger.getAttribute('data-full') ??
          trigger.getAttribute('src') ??
          trigger.getAttribute('href');
        const alt = trigger.getAttribute('data-alt') ?? trigger.getAttribute('alt') ?? '';
        if (full) {
          openLightbox(full, alt);
        }
      });

      // Close actions
      closeBtn?.addEventListener('click', closeLightbox);
      backdropBtn?.addEventListener('click', closeLightbox);
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          closeLightbox();
        }
      });
    }
  </script>
</div>

