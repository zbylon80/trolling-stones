---

---

<div
  id='lightbox-overlay'
  class='fixed inset-0 z-50 hidden items-center justify-center bg-black/90 p-4'
  role='dialog'
  aria-modal='true'
  aria-label='Podglad zdjecia'
>
  <button
    id='lightbox-close'
    class='absolute right-4 top-4 inline-flex items-center justify-center rounded-md bg-white/10 p-2 text-white hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-white'
    aria-label='Zamknij podglad'
  >
    &times;
  </button>
  <button
    id='lightbox-prev'
    class='absolute left-4 top-1/2 hidden -translate-y-1/2 p-3 text-xl bg-neutral-800/70 hover:bg-neutral-700/70 text-white rounded-full'
    aria-label='Poprzednie zdjecie'
  >
    &lsaquo;
  </button>
  <button
    id='lightbox-next'
    class='absolute right-4 top-1/2 hidden -translate-y-1/2 p-3 text-xl bg-neutral-800/70 hover:bg-neutral-700/70 text-white rounded-full'
    aria-label='Nastepne zdjecie'
  >
    &rsaquo;
  </button>
  <img
    id='lightbox-image'
    alt='Podglad'
    class='max-h-[90vh] max-w-[90vw] object-contain rounded'
  />
  <div
    id='lightbox-caption'
    class='absolute bottom-4 left-1/2 -translate-x-1/2 text-center text-neutral-300 text-sm px-3'
  >
  </div>
  <!-- Klikniecie tla zamyka -->
  <button
    id='lightbox-backdrop'
    class='absolute inset-0 -z-10'
    aria-hidden='true'></button>
  <style is:inline>
    /* Tailwind classes handle styling */
  </style>
  <script>
    const overlay = document.querySelector<HTMLDivElement>('#lightbox-overlay');
    const imgEl = document.querySelector<HTMLImageElement>('#lightbox-image');
    const captionEl =
      document.querySelector<HTMLDivElement>('#lightbox-caption');
    const closeBtn =
      document.querySelector<HTMLButtonElement>('#lightbox-close');
    const backdropBtn =
      document.querySelector<HTMLButtonElement>('#lightbox-backdrop');
    const prevBtn =
      document.querySelector<HTMLButtonElement>('#lightbox-prev');
    const nextBtn =
      document.querySelector<HTMLButtonElement>('#lightbox-next');

    let triggers: Element[] = [];
    let currentIndex = -1;

    function collectTriggers(source: Element) {
      const group = source.getAttribute('data-lightbox-group');
      triggers = Array.from(document.querySelectorAll('[data-lightbox]')).filter(
        (el) => {
          const elGroup = el.getAttribute('data-lightbox-group');
          return elGroup === group || (!elGroup && !group);
        }
      );
    }

    function updateNavVisibility() {
      const hasMultiple = triggers.length > 1;
      prevBtn?.classList.toggle('hidden', !hasMultiple);
      nextBtn?.classList.toggle('hidden', !hasMultiple);
    }

    function render(index: number) {
      const trigger = triggers[index];
      if (!trigger || !imgEl) return;

      const full =
        trigger.getAttribute('data-full') ||
        trigger.getAttribute('src') ||
        trigger.getAttribute('href');
      if (!full) return;

      const alt =
        trigger.getAttribute('alt') || trigger.getAttribute('data-alt') || '';

      imgEl.src = full;
      imgEl.alt = alt || 'Podglad';
      const hideCaption = trigger.hasAttribute('data-lightbox-hide-caption');
      if (captionEl) {
        if (hideCaption || !alt) {
          captionEl.textContent = '';
          captionEl.classList.add('hidden');
        } else {
          captionEl.textContent = alt;
          captionEl.classList.remove('hidden');
        }
      }
      currentIndex = index;
      updateNavVisibility();
    }

    function openLightbox(index: number) {
      if (!overlay) return;
      render(index);
      overlay.classList.remove('hidden');
      overlay.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      if (!overlay) return;
      overlay.classList.add('hidden');
      overlay.classList.remove('flex');
      if (imgEl) imgEl.src = '';
      if (captionEl) {
        captionEl.textContent = '';
        captionEl.classList.add('hidden');
      }
      document.body.style.overflow = '';
      triggers = [];
      currentIndex = -1;
      updateNavVisibility();
    }

    function showRelative(step: number) {
      if (triggers.length < 2) return;
      const nextIndex = (currentIndex + step + triggers.length) % triggers.length;
      render(nextIndex);
    }

    // Delegation: elements with data-lightbox
    document.addEventListener('click', (e) => {
      const target = e.target;
      if (!(target instanceof Element)) return;
      const trigger = target.closest('[data-lightbox]');
      if (trigger) {
        e.preventDefault();
        collectTriggers(trigger);
        const index = triggers.indexOf(trigger);
        if (index !== -1) openLightbox(index);
      }
    });

    // Close actions
    closeBtn?.addEventListener('click', closeLightbox);
    backdropBtn?.addEventListener('click', closeLightbox);
    prevBtn?.addEventListener('click', () => showRelative(-1));
    nextBtn?.addEventListener('click', () => showRelative(1));
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeLightbox();
        return;
      }
      if (!overlay || overlay.classList.contains('hidden')) return;
      if (e.key === 'ArrowLeft') {
        e.preventDefault();
        showRelative(-1);
      }
      if (e.key === 'ArrowRight') {
        e.preventDefault();
        showRelative(1);
      }
    });
  </script>
</div>
